name: dotnet-build-package
  
on:

  workflow_dispatch:  

  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: '9.0.x'

jobs:
  build:
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from pipeline run
        run: echo "PACKAGE_VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Setup dotnet and package endpoint
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{ inputs.dotnet-version }}'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      
      - name: debug packages 
        run: ls -al ${{ github.workspace }}
      
      - name: Restore build and package all .NET projects
        run: |
          for proj in $(find . -name "*.csproj"); do
            echo "Building $proj"
            dotnet restore "$proj"
            dotnet build "$proj" --no-restore --configuration Release
            dotnet pack "$proj" --configuration Release --no-build -p:Version=${{ env.PACKAGE_VERSION }} --output ./nupkgs
          done

      - name: debug packages 
        run: ls -al ${{ github.workspace }}
      
      - name: Publish to GitHub Packages
        run: dotnet nuget push ./nupkgs/*.nupkg  --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
      
  #     - name: Test with the dotnet CLI
  #       run: dotnet test --no-build

  containerize:
    if: success()
    permissions:
      contents: read
      packages: write
      # attestations: write
      # id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: ls -al -R ${{ github.workspace }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.workspace }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}